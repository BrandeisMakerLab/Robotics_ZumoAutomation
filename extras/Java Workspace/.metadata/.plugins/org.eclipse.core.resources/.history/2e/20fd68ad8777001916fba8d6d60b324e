package classGenerators;
import static org.junit.Assert.*;
import ScriptEditor;

import org.junit.Test;


/**
 * Name: Jacob Smith Email:jsmith2021@brandeis.edu Assignment: Personal Study,
 * makes sure that the ArduinoClass CPP returns a proprly formatted classs when
 * given the correct inputs Date: May 15, 2019 Sources: Bugs:
 */

public class ArduinoClassCppTest {

	@Test
	/**Establishes correct example strings and confirms the output of the cpp class with correct
	 * tempalte file
	 * */
	public void test() {

		// This example generates a class represented as a string
		// The user can decide how these string will be inputted
		// These fields are the minimum required to generate an arudino class

		// Titles are one word
		String className = "Timer";
		// This information is useful in the header comment
		String author = "Jacob Smith";
		String organization = "Brandeis Robotics Club";

		String headerComments = "A timer class to allow the user to create loops and maintain program control";

		String supportedBoards = "ARDUINO_AVR_UNO ESP8266_WEMOSD1R1";
		// variables will always be private, I ain't in the business of allowing
		// bad programming
		// format of variables is dataType varName
		String variables = "";
		variables += "long|initTime|the beginning time of the interval" + "\n";
		variables += "Apple|test|a test varible for the parser";

		// Methods are an array of strings, each string is format
		// returnType methodName comments
		// method bodies are the code that goes in the methods
		String publicMethods = "";

		publicMethods += "initTime=millis();\n\n";
		publicMethods += "long|resetTime|resets the Initial Time|\n";
		publicMethods += "initTime=millis();\nreturn getTime();\n\n";
		publicMethods += "long|getTime|returns the current time|\n";
		publicMethods += "return millis()-initTime;\n\n";
		publicMethods += "long|getAndResetTime|returns the current time and the initial time|\n";
		publicMethods += "long curTime=getTime();\nresetTime();\nreturn curTime;\n\n";

		String privateMethods = null;

		ArduinoClassCpp template = new ArduinoClassCpp(className, author,
				organization, headerComments, supportedBoards, variables,
				privateMethods, publicMethods);
		String generatedClass = template.toString();
		ScriptEditor s = new ScriptEditor("Template.cpp");
		String correctClass = s.getContents();
		assertEqualsFeedback(generatedClass,correctClass);

	}
	
	

}
