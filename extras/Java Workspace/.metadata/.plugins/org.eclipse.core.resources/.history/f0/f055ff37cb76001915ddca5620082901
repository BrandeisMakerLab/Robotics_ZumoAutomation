 /* Name: Jacob Smith
Date: May 12 2019
Assignment: Personal study, allows the user to ecreate the cpp file given necessary information
using an inheritance schem to save code
Email: jsmith2021@brandeis.edu
*/

public class ArduinoClassCpp extends ArduinoClassMaster{
	
	
	/**
	* Loads an example class into memory
	* and parses it into header comment, methods, header file
	*/
	public ArduinoClassCpp(String className,String author,String organization,String headerComments,String supportedBoards,String variables,String privateMethods,String publicMethods){
		super(className,author,organization,headerComments,supportedBoards);
		arduinoClass+=super.generateBoardDefInitial(supportedBoards);
		arduinoClass+=super.startLibraryIncludes(variables, className)+"\n";
		arduinoClass+=generateMethods(className,privateMethods,false);	
		//add an automatic comment for the constructor
		publicMethods="|"+className+"|Creates a new "+className+" object|\n"+publicMethods;
		arduinoClass+=generateMethods(className,publicMethods,true);
		arduinoClass+=generateBoardDefFinal();
	}
		

	/*Generates a method given the dataType, methodName, comment, and body*/
	protected String genMethod(String className,String []methodParts,boolean isPublic){
		String methodString="";
		methodString+="//"+methodParts[2]+"\n";//comment
		methodString+=methodParts[0];//data type
		//remove extra space for constructor
		if(!methodParts[0].equals("")) {
			methodString+=" ";
		}
		methodString+=className+"::"+methodParts[1]+"() {";//name
		methodString+=insertTabs(methodParts[3]);//body
		methodString+="\n}\n\n";
		return methodString;
		
	}
	
	/** Generates the final board definition which generates errors if the wrong board is used*/
	private String generateBoardDefFinal(){
		return "#endif";
	}
	/**
	* Shows an example file with this class
	*/
	public static void main (String [] args){
		//This example generates a class represented as a string
		//The user can decide how these string will be inputted
		//These fields are the minimum required to generate an arudino class
		
		//Titles are one word
		String className="Timer";
		//This information is useful in the header comment
		String author="Jacob Smith";
		String organization="Brandeis Robotics Club";
				
			
		String headerComments="A timer class to allow the user to create loops and maintain program control";
			
		String supportedBoards="ARDUINO_AVR_UNO ESP8266_WEMOSD1R1";
		//variables will always be private, I ain't in the business of allowing bad programming
		//format of variables is dataType varName
		String variables="";
		variables+="long|initTime|the beginning time of the interval"+"\n";
		variables+="Apple|test|a test varible for the parser";
				
		//Methods are an array of strings, each string is format
		//returnType methodName comments
		//method bodies are the code that goes in the methods
		String publicMethods="";
			
		publicMethods+="initTime=millis();\n\n";
		publicMethods+="long|resetTime|resets the Initial Time|\n";
		publicMethods+="initTime=millis();\nreturn getTime();\n\n";
		publicMethods+="long|getTime|returns the current time|\n";
		publicMethods+="return millis()-initTime;\n\n";
		publicMethods+="long|getAndResetTime|returns the current time and the initial time|\n";
		publicMethods+="long curTime=getTime();\nresetTime();\nreturn curTime;\n\n";
			
					
		String  privateMethods=null;
		
		ArduinoClassCpp template=new ArduinoClassCpp(className,author,organization,headerComments,supportedBoards,variables,privateMethods,publicMethods);
		System.out.println(template.toString());
		
	}
		
}