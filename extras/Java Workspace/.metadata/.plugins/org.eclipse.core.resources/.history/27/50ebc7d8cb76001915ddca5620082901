/** Name: Jacob Smith
 *  Email:jsmith2021@brandeis.edu
 *  Assignment: Personal Study, an enum of class fields with user prompts and error messages.
 *  	This enum allows all of the field information to be in one place, encapsulation
 *  Date: May 15, 2019
 *  Sources: https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html
 *  Bugs:
 *  notes: enum has nice automatic toString, naem field
 */


public enum ArduinoClassFields {
	
    CLASSNAME 		("Please enter the name of the class"												, "name"),
    AUTHOR   		("Please enter the name of the author"												, "John Smith"),
    ORGANIZATION   	("Please enter your organization"													, "Brandeis University"),
    HEADERCOMMENTS 	("Please enter a description of the class"											, "This class does cool things!"),
    SUPPORTEDBOARDS	("Please enter the boards your class can work with or if any board can be used"							, "ARUINO_AVR_UNO/ALL"),
    VARIABLES  		("Please enter the type and name of class variables"								, "int time"),
    PRIVATEMETHODS  ("Please enter the return type, name, description, and body of the private methods"	, "int|getTime|returns the current time\ntime+=10;\nreturn time"),
    PUBLICMETHODS 	("Please enter the return type, name, description, and body of the public methods"	, "int|getTime|returns the current time\ntime+=10;\nreturn time" );

    public final String prompt;//the prompt for the user
    public final String format; //the proper formatting of the field
    
    /** A private constructor to create an enum with prompt and format
     * */
    ArduinoClassFields(String prompt, String format) {
        this.prompt = prompt;
        this.format = format;
    }

    /**Displays capabilities of the enum
     * */
    public static void main(String[] args) {
        System.out.println("Prints out the different enums, prompts, and formatting contained in this class");
        for (ArduinoClassFields a : ArduinoClassFields.values()){
        	System.out.println(a);
        }
          
    }
    
    /**returns a string representation of the enum, with name, prompt, and format
     * */
    public String toString(){
    	String enumString="";
    	enumString+=this.name();
    	enumString+="\t"+prompt;
    	//insert Tabs into any of the multiline formats so they print well
    	String formatWithTabs=ArduinoParser.insertTabs(format,2);
    	enumString+=formatWithTabs;
    	return enumString;
    }
}
/*
String className,String author,String organization,String headerComments,String supportedBoards,String variables,String privateMethods,String publicMethods
			
	//Creates a new ArduinoClassMaster object from an array of the necessary strings
	//
	public ArduinoClassH(String []classInfo){
		
		
	}*/