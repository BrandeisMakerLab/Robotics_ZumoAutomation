<?xml version="1.0" encoding="UTF-8"?>
<testrun name="ArduinoClassCppTest" project="Arduino Class Maker" tests="1" started="1" failures="1" errors="0" ignored="0">
  <testsuite name="classGenerators.ArduinoClassCppTest" time="0.578">
    <testcase name="test" classname="classGenerators.ArduinoClassCppTest" time="0.578">
      <failure>
        <expected>/* Written by Jacob Smith for Brandeis Robotics Club 2019/05/15
A timer class to allow the user to create loops and maintain program control
Boards supported: ARDUINO_AVR_UNO ESP8266_WEMOSD1R1*/

//only compile this class if the board is correct
if defined(ARDUINO_AVR_UNO) | defined (ESP8266_WEMOSD1R1)

//includes the libraries of code necessary to make this one work
#include &lt;Timer.h&gt;

//Creates a new Timer object
Timer::Timer() {    
    initTime=millis();

}

//resets the Initial Time
long Timer::resetTime() {    
    initTime=millis();
    return getTime();

}

//returns the current time
long Timer::getTime() {    
    return millis()-initTime;

}

//returns the current time and the initial time
long Timer::getAndResetTime() {    
    long curTime=getTime();
    resetTime();
    return curTime;

}

#endif</expected>
        <actual>/* Written by Jacob Smith for Brandeis Robotics Club 2019/05/15&#13;
A timer class to allow the user to create loops and maintain program control&#13;
Boards supported: ARDUINO_AVR_UNO ESP8266_WEMOSD1R1*/&#13;
&#13;
//only compile this class if the board is correct&#13;
if defined(ARDUINO_AVR_UNO) | defined (ESP8266_WEMOSD1R1)&#13;
&#13;
//includes the libraries of code necessary to make this one work&#13;
#include &lt;Timer.h&gt;&#13;
&#13;
//Creates a new Timer object&#13;
Timer::Timer() {    &#13;
    initTime=millis();&#13;
&#13;
}&#13;
&#13;
//resets the Initial Time&#13;
long Timer::resetTime() {    &#13;
    initTime=millis();&#13;
    return getTime();&#13;
&#13;
}&#13;
&#13;
//returns the current time&#13;
long Timer::getTime() {    &#13;
    return millis()-initTime;&#13;
&#13;
}&#13;
&#13;
//returns the current time and the initial time&#13;
long Timer::getAndResetTime() {    &#13;
    long curTime=getTime();&#13;
    resetTime();&#13;
    return curTime;&#13;
&#13;
}&#13;
&#13;
#endif&#13;
</actual>org.junit.ComparisonFailure: expected:&lt;...tics Club 2019/05/15[
A timer class to allow the user to create loops and maintain program control
Boards supported: ARDUINO_AVR_UNO ESP8266_WEMOSD1R1*/

//only compile this class if the board is correct
if defined(ARDUINO_AVR_UNO) | defined (ESP8266_WEMOSD1R1)

//includes the libraries of code necessary to make this one work
#include &lt;Timer.h&gt;

//Creates a new Timer object
Timer::Timer() {    
    initTime=millis();

}

//resets the Initial Time
long Timer::resetTime() {    
    initTime=millis();
    return getTime();

}

//returns the current time
long Timer::getTime() {    
    return millis()-initTime;

}

//returns the current time and the initial time
long Timer::getAndResetTime() {    
    long curTime=getTime();
    resetTime();
    return curTime;

}

#endif]&gt; but was:&lt;...tics Club 2019/05/15[&#13;
A timer class to allow the user to create loops and maintain program control&#13;
Boards supported: ARDUINO_AVR_UNO ESP8266_WEMOSD1R1*/&#13;
&#13;
//only compile this class if the board is correct&#13;
if defined(ARDUINO_AVR_UNO) | defined (ESP8266_WEMOSD1R1)&#13;
&#13;
//includes the libraries of code necessary to make this one work&#13;
#include &lt;Timer.h&gt;&#13;
&#13;
//Creates a new Timer object&#13;
Timer::Timer() {    &#13;
    initTime=millis();&#13;
&#13;
}&#13;
&#13;
//resets the Initial Time&#13;
long Timer::resetTime() {    &#13;
    initTime=millis();&#13;
    return getTime();&#13;
&#13;
}&#13;
&#13;
//returns the current time&#13;
long Timer::getTime() {    &#13;
    return millis()-initTime;&#13;
&#13;
}&#13;
&#13;
//returns the current time and the initial time&#13;
long Timer::getAndResetTime() {    &#13;
    long curTime=getTime();&#13;
    resetTime();&#13;
    return curTime;&#13;
&#13;
}&#13;
&#13;
#endif&#13;
]&gt;
	at org.junit.Assert.assertEquals(Assert.java:125)
	at org.junit.Assert.assertEquals(Assert.java:147)
	at classGenerators.ArduinoClassCppTest.test(ArduinoClassCppTest.java:69)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

</failure>
    </testcase>
  </testsuite>
</testrun>
